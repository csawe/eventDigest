substitutions:
  _REGION: region
  _REPO: images
  _PROJECT_ID: project_id
  _POSTGRES_USER: postgres_user  # fill at trigger time or CI
  _POSTGRES_PASSWORD: postgres_password  # fill at trigger time or CI
  _POSTGRES_DB: postgres_db
  _POSTGRES_HOST: postgres_host
  _REDIS_HOST: redis_host

steps:
  # Build all images using the shared Dockerfile
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/event_receiver', '-f', 'Dockerfile', '.']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/processing_worker', '-f', 'Dockerfile', '.']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/persistence_worker', '-f', 'Dockerfile', '.']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/event_publisher', '-f', 'Dockerfile', '.']

  # Push images
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/event_receiver']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/processing_worker']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/persistence_worker']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/event_publisher']

  # Deploy to Cloud Run with env vars and commands
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      [
        'run', 'deploy', 'event-receiver',
        '--image', '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/event_receiver',
        '--platform', 'managed',
        '--region', '${_REGION}',
        '--allow-unauthenticated',
        '--command=python',
        '--args=App/eventReceiver.py',
        '--set-env-vars',
        'PORT=8080,POSTGRES_USER=${_POSTGRES_USER},POSTGRES_PASSWORD=${_POSTGRES_PASSWORD},POSTGRES_DB=${_POSTGRES_DB},POSTGRES_HOST=${_POSTGRES_HOST},REDIS_HOST=${_REDIS_HOST}'
      ]

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      [
        'run', 'deploy', 'processing-worker',
        '--image', '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/processing_worker',
        '--platform', 'managed',
        '--region', '${_REGION}',
        '--allow-unauthenticated',
        '--command=python',
        '--args=App/processingWorker.py',
        '--set-env-vars',
        'PORT=8080,POSTGRES_USER=${_POSTGRES_USER},POSTGRES_PASSWORD=${_POSTGRES_PASSWORD},POSTGRES_DB=${_POSTGRES_DB},POSTGRES_HOST=${_POSTGRES_HOST},REDIS_HOST=${_REDIS_HOST}'
      ]

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      [
        'run', 'deploy', 'persistence-worker',
        '--image', '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/persistence_worker',
        '--platform', 'managed',
        '--region', '${_REGION}',
        '--allow-unauthenticated',
        '--command=python',
        '--args=App/persistenceWorker.py',
        '--set-env-vars',
        'PORT=8080,POSTGRES_USER=${_POSTGRES_USER},POSTGRES_PASSWORD=${_POSTGRES_PASSWORD},POSTGRES_DB=${_POSTGRES_DB},POSTGRES_HOST=${_POSTGRES_HOST},REDIS_HOST=${_REDIS_HOST}'
      ]

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      [
        'run', 'deploy', 'event-publisher',
        '--image', '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/event_publisher',
        '--platform', 'managed',
        '--region', '${_REGION}',
        '--allow-unauthenticated',
        '--command=python',
        '--args=App/eventPublisher.py',
        '--set-env-vars',
        'PORT=8080,POSTGRES_USER=${_POSTGRES_USER},POSTGRES_PASSWORD=${_POSTGRES_PASSWORD},POSTGRES_DB=${_POSTGRES_DB},POSTGRES_HOST=${_POSTGRES_HOST},REDIS_HOST=${_REDIS_HOST}'
      ]

images:
  - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/event_receiver'
  - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/processing_worker'
  - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/persistence_worker'
  - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/event_publisher'

options:
  logging: CLOUD_LOGGING_ONLY
